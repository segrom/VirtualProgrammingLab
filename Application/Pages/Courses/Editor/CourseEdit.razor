@page "/course/edit/{id:int}"
@using Application.Pages.Courses.Editor.Components
@using Application.Services.Courses
@using Application.Services.Lecturers
@using Application.Shared.Utils
@using Common.Courses
@using Common.Lecturers
@using Application.Controllers
@attribute [Authorize(Roles = $"{RoleController.LecturerRole}")]
@inject ILecturerService LecturerService
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@inject ILogger<CourseEdit> Logger
@inject IJSRuntime JsRuntime

<PageTitle>@(_course?.Title??"Глава")</PageTitle>

<div class="container-md d-grid mt-2">
    <div class="row">
        <div class="d-flex align-items-lg-center justify-content-between">
            <h1 class=" m-3">@(_course?.Title??"Course not found")</h1>
            @if (_course?.Status == CourseStatus.Published)
            {
                <em> Не рекомендуется редактировать этот курс, т.к. он <strong class="text-info">опубликован</strong> </em>
            }
            <div>
                <button class="btn btn-dark align-items-center d-flex justify-content-center"  @onclick="() => ShowModal(CourseSettingsModalId)" >
                    <i class="ph-fill ph-gear me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                    <span>Настройки</span>
                </button>
            </div>
        </div>
    </div>
    <hr>
    <div class="row">
        <div class="col-md-3">
            <nav id="navbar" class="navbar flex-column align-items-stretch p-3">
                <div class="navbar-brand d-flex align-items-center justify-content-between">
                    <h4>Содержание</h4>
                </div>
                
                <nav class="nav nav-pills flex-column">
                    
                    @if (_course is {Chapters: not null })
                    {
                        @foreach (var chapter in _course.Chapters)
                        {
                            <button @onclick="() => SelectChapter(chapter)" class="nav-item btn btn-dark my-1 align-items-center d-flex justify-content-center @(chapter.Id == _selectedChapter?.Id ? "active" : "")">
                                @if (chapter.IsExercise)
                                {
                                    <i class="ph-fill ph-code text-info mx-1" style="padding-top: 0.1em; font-size: 1em;"></i>
                                }
                                else
                                {
                                    <i class="ph ph-article mx-1" style="padding-top: 0.1em; font-size: 1em;"></i>
                                }
                                <span>@chapter.Title</span>
                            </button>
                        }
                    }
                    else
                    {
                        @: Chapters are null
                    }
                    <button class="btn btn-outline-primary mt-2" data-bs-toggle="modal" data-bs-target="#@NewChapterModalId">Добавить главу</button>
                </nav>
            </nav>
        </div>
        <div class="col">
            <div class="d-flex justify-content-between align-items-center p-2">
                @if (_selectedChapter is null)
                {
                    if (_course?.Chapters?.Count > 0)
                    {
                        <p class="lead text-secondary">Выберите главу которую хотели бы отредактировать</p>
                    }
                    else
                    {
                        <p class="lead text-secondary">Создайте первую главу с помощью кнпоки "Добавить главу"</p>
                    }
                    
                }
                else
                {
                <h4><em class="text-secondary">Глава</em> "@(_selectedChapter.Title)"</h4>
                <div class="btn-group py-3">
                    <button @onclick="GoToChapter" class="btn btn-primary align-items-center d-flex justify-content-center">
                        <i class="ph-fill ph-pencil-simple me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                        <span>Редактировать</span>
                    </button>
                    <button @onclick="() => ShowModal(DeleteChapterModalId)" class="btn btn-outline-danger align-items-center d-flex justify-content-center">
                        <i class="ph-fill ph-trash me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                        <span>Удалить</span>
                    </button>
                </div>
                 }
            </div>
            @if (_selectedChapter is not null)
            {
                <article id="articlemd">
                </article>
            }
        </div>
    </div>
</div>

<CourseSettingsModal ModalId="@CourseSettingsModalId" Course="@_course" OnRefresh="() => UpdateChapters()"/>
<NewChapterModal ModalId="@NewChapterModalId" Course="@_course" OnRefresh="() => UpdateChapters(true)" />
<ConfirmationModal ModalId="@DeleteChapterModalId" OnSuccess="() => DeleteChapter()"
                       TitleStyle="text-danger" SubmitStyle="btn-danger">
        <Title>
            <i class="ph ph-trash me-1" style="font-size: 1.5em;"></i>
            <span>Удаление</span>
        </Title>
        <Body>
        <h4> Вы уверены что хотите удалить главу <strong>@_selectedChapter?.Title</strong>?</h4>
        </Body>
    </ConfirmationModal>

@code {

        private const string NewChapterModalId = "NewChapterModal";
        private const string CourseSettingsModalId = "CourseSettingsModal";
        private const string DeleteChapterModalId = "DeleteChapterModal";

    [Parameter]
    public int Id { get; set; }

    private Course? _course;
    private Lecturer? _lecturer;

    private Chapter? _selectedChapter;

    protected override async Task OnInitializedAsync()
    {
        _lecturer = await LecturerService.GetCurrentLecturerAsync();
        _course = await CourseService.GetCourseAsync(Id);
        Logger.LogInformation($"Load course by lecturer {_lecturer.Id} {_lecturer.User.GetFullName()} - {_course.Id} {_course.Title}, chapters count: {_course.Chapters.Count}");
        if(_course is null || _lecturer is null)
        {
            NavigationManager.NavigateTo("404");
            return;
        }
        if (_course.Author.Id != _lecturer.Id) throw new Exception("У вас нет доступа к редактированию этого курса ⛔");
    }

    private void SelectChapter(Chapter chapter)
    {
        _selectedChapter = chapter;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(_selectedChapter != null) 
            JsRuntime.InvokeVoidAsync("codeFunctions.parseMarkArticle", _selectedChapter.Body, "articlemd");
    }

    private async void UpdateChapters(bool changeSelected = false)
    {
        _course = await CourseService.GetCourseAsync(Id);
        if(changeSelected) _selectedChapter = _course?.Chapters.Count > 0 ? _course.Chapters.Last() : null;
        StateHasChanged();
    }

    private void GoToChapter()
    {
        if(_selectedChapter is null) return;
        NavigationManager.NavigateTo($"/course/edit/{Id}/{_selectedChapter.Id}");
    }

    private async Task ShowModal(string modalId)
    {
        await JsRuntime.InvokeVoidAsync("codeFunctions.showModal", modalId);
    }

    private void DeleteChapter()
    {
        if(_selectedChapter is null) return;
        LecturerService.DeleteChapterAsync(_selectedChapter);
        UpdateChapters(true);
    }

}