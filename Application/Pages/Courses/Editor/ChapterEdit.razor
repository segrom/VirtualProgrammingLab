@page "/course/edit/{id:int}/{chapterId:int}"
@using Application.Services.Courses
@using Application.Services.Lecturers
@using Application.Shared.Utils
@using Common.Account
@using Common.Common
@using Common.Courses
@using Common.Lecturers
@using Application.Controllers
@attribute [Authorize(Roles = $"{RoleController.LecturerRole}")]
@inject ILecturerService LecturerService
@inject ICourseService CourseService
@inject IExerciseService ExerciseService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ILogger<CourseEdit> Logger

<div class="container-md d-grid mt-2">
    <div class="row">
        <div class="d-flex align-items-lg-center justify-content-between">
            <div class="d-flex">
                <a href="@($"/course/edit/{Id}")" class="btn btn-dark align-items-center d-flex justify-content-center me-2">
                    <i class="ph ph-caret-left me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                    <span>@(_course?.Title ?? "Назад")</span>
                </a>
                @if (_chapter is not null)
                {
                    <button @onclick="SaveChanges" class="btn btn-primary align-items-center d-flex justify-content-center @(_isDirty ? "" : "disabled")" disabled="@(!_isDirty)">
                        @if (_isSaving)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Сохранение...</span>
                        }
                        else
                        {
                            <i class="ph-fill ph-floppy-disk-back me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                            <span>Сохранить</span>
                        }
                    </button>
                }
            </div>
            <h1 class="m-3">
                @if (_exercise is not null)
                {
                    <i class="ph-bold ph-code me-1 text-info" style="padding-top: 0.13em; font-size: 1em;"></i>
                }
                else
                {
                    <em>Глава</em>
                }
                "@(_chapter?.Title ?? "")"
            </h1>
        </div>
    </div>
    <hr>
    @if (_exercise is null)
    {
        <div class="row  overflow-auto" style="height: 80vh; min-width: 500px;">
            <div class="col-6">
                <CodeInput StartCode="@_startCode" Language="md" @bind-Code="RawBody"/>
            </div>

            <div class="col-6">
                @if (_chapter is not null)
                {
                    <article id="articlemd">
                    </article>
                }
            </div>
        </div>
    }
    else
    {
        <div class="row border rounded-3 m-1 p-2 overflow-auto" style="height: 30vh; min-width: 100px;">
            <div class="col-6">
                <CodeInput StartCode="@_startCode" Language="md" @bind-Code="RawBody"/>
            </div>
            <div class="col-6">
                <article>
                    @if (_chapter is not null)
                    {
                        <article id="articlemd">
                        </article>
                    }
                </article>
            </div>
        </div>
        <div class="my-2  d-flex justify-content-between">
            <div class="d-flex align-items-center justify-content-center">
                <h5>
                    Реализации
                    <i class="btn btn-dark ph ph-question m-1 p-1" data-bs-toggle="modal" data-bs-target="#@ImplHelpModalId"></i>
                </h5>
            </div>
            <div>
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle align-items-center d-flex justify-content-center" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="ph ph-plus me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                        <span>Добавить</span>
                    </button>
                    <ul class="dropdown-menu">
                        @if (_languages is not null)
                        {
                            foreach (var language in _languages)
                            {
                                <li>
                                    <button class="dropdown-item" @onclick="() => CreateImplWithLanguage(language)" >@language.Name</button>
                                </li>
                            }
                        }
                    </ul>
                </div>

            </div>
        </div>
        <div class="d-block mt-1">
            @if (_exercise?.Implementations is not null)
            {
                @foreach (var impl in _exercise.Implementations)
                {
                    <div class="d-flex border border-2 rounded-3 p-1 mb-2 justify-content-between align-items-center">
                        <button @onclick="() => GoToImpl(impl)" class="btn btn-dark align-items-center d-flex justify-content-center">
                            <span>@impl.Language.Name</span>
                            <i class="ph ph-caret-right ms-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                        </button>
                        <div class="d-flex">
                            <div class="d-flex mx-2 justify-content-between align-items-center @(impl.HasPattern() ? "text-success" : "text-danger") ">
                                <i class="ph-bold @(impl.HasPattern() ? "ph-check-circle" : "ph-x-circle ") me-1" style=" font-size: 1.2em;"></i>
                                <strong>Шаблон</strong>
                            </div>
                            <div class="d-flex mx-2 justify-content-between align-items-center  @(impl.HasTests() ? "text-success" : "text-danger")">
                                <i class="ph-bold @(impl.HasTests() ? "ph-check-circle" : "ph-x-circle ") me-1" style=" font-size: 1.2em;"></i>
                                <strong>Тесты</strong>
                            </div>
                            <button @onclick="() => _selectedImpl = impl" class="btn btn-outline-danger align-items-center d-flex justify-content-center" data-bs-toggle="modal" data-bs-target="#@DeleteImplModalId">
                                <i class="ph ph-trash-simple me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                                <span>Удалить</span>
                            </button>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

<InfoModal ModalId="@ImplHelpModalId">
    <Title>
        <i class="ph ph-info me-1" style="font-size: 1.2em;"></i>
        <span>Справка</span>
    </Title>
    <Body>Реализация задания – это код шаблона для студентов и тестов, выполняемых для проверки задания на конкретном языке программирования</Body>
</InfoModal>
<ConfirmationModal Title="Внимание" ModalId="@DeleteImplModalId">
    <p>
        Вы уверены что хотите удалить реализацию задания <strong>@(_chapter?.Title ?? "")</strong> на языке <strong>@(_selectedImpl?.Language.Name ?? "")</strong> ?
    </p>
</ConfirmationModal>

@code {

        private const string ImplHelpModalId = "ImplHelpModal";
        private const string DeleteImplModalId = "DeleteImplModal";
    
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int ChapterId { get; set; }
    
    private Course? _course;
    private Chapter? _chapter;
    private Exercise? _exercise;
    private Lecturer? _lecturer;
    private Language[]? _languages;
    
    private Impl? _selectedImpl;
    
    private string RawBody
    {
        get => _rawBody;
        set
        {
            _rawBody = value;
            OnBodyChanged();
        }

    }

    private string _rawBody;
    private string _startCode;
    private bool _isDirty;
    private bool _isSaving;
    
    protected override async Task OnInitializedAsync()
    {
        _languages = await ExerciseService.GetAllLanguagesAsync();
        _lecturer = await LecturerService.GetCurrentLecturerAsync();
        _course = await CourseService.GetCourseAsync(Id);
        Logger.LogInformation($"Load course by lecturer {_lecturer.Id} {_lecturer.User.GetFullName()} - {_course.Id} {_course.Title}, chapters count: {_course.Chapters.Count}");
        if(_course is null || _lecturer is null)
        {
            NavigationManager.NavigateTo("404");
            return;
        }
        if (_course.Author.Id != _lecturer.Id) throw new Exception("У вас нет доступа к редактированию этого курса ⛔");

        _chapter = _course.Chapters.FirstOrDefault(x => x.Id == ChapterId);
        if (_chapter is null) throw new Exception("Такой статьи не существует ¯\\_(ツ)_/¯");
        if (_chapter.IsExercise) _exercise = await CourseService.GetExerciseAsync(_chapter);
        _startCode = _chapter.Body;
        _rawBody = _startCode;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        OnBodyChanged();
    }

    private void OnBodyChanged()
    {
        if(_chapter is null) return;
        _isDirty = true;
        JsRuntime.InvokeVoidAsync("codeFunctions.parseMarkArticle", _rawBody, "articlemd");
    }

    private async Task SaveChanges()
    {
        if(_chapter is null) return;
        _isSaving = true;
        _chapter.Body = RawBody;
        await CourseService.UpdateChapterAsync(_chapter);
        _isDirty = _isSaving = false;
    }

    private async Task CreateImplWithLanguage(Language language)
    {
        if(_exercise is null) return;
        await ExerciseService.AddImplWithLanguageAsync(_exercise.Id, language.Id);
        _exercise = await CourseService.GetExerciseAsync(_chapter);
        StateHasChanged();
    }

    private void GoToImpl(Impl impl)
    {
        NavigationManager.NavigateTo($"/course/edit/{Id}/{ChapterId}/{impl.Id}");
    }

    private async Task DeleteSelectedImpl()
    {
        if(_exercise is null || _selectedImpl is null) return;
        await ExerciseService.DeleteImplAsync(_selectedImpl);
        _exercise = await CourseService.GetExerciseAsync(_chapter);
        StateHasChanged();
    }

}