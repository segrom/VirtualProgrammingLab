@page "/course/{id:int}"
@using Application.Data.Courses
@using Application.Services.Courses
@using Application.Data.Account
@using Application.Data.Students
@using Application.Services.Compile
@using Application.Services.Students
@attribute [Authorize(Roles = $"{RoleController.StudentRole}")]
@inject IStudentService StudentService
@inject ICourseService CourseService
@inject IExerciseService ExerciseService
@inject ICompileService CompileService
@inject NavigationManager NavigationManager
@inject ILogger<CourseReader> Logger
@inject IJSRuntime JsRuntime

<div class="container-md d-grid mt-2">
    <div class="row">
        <div class="d-flex align-items-center justify-content-between">
            <h1 class=" m-3">@(_course?.Title??"Course not found")</h1>
            <div class="progress my-2" style="width: 20%">
                <div class="progress-bar" role="progressbar" style="width: 29%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">29%</div>
            </div>
        </div>
    </div>
    <hr>
    <div class="row">
        <div class="col-md-3">
            <nav id="navbar" class="navbar flex-column align-items-stretch p-3">
                <div class="navbar-brand d-flex align-items-center justify-content-between">
                    <h4>Содержание</h4>
                </div>
                <nav class="nav nav-pills flex-column">
                    
                    @if (_course is {Chapters: not null})
                    {
                        @foreach (var chapter in _course.Chapters)
                        {
                            <button @onclick="() => SelectChapter(chapter)" class="nav-item btn btn-dark my-1 align-items-center d-flex justify-content-center @(chapter.Id == _selectedChapter?.Id ? "active" : "")">
                                
                                @if (chapter.IsExercise)
                                {
                                    bool isCompleted = chapter.Exercise.States.Any(s => s.StudentId == _student.Id && s.Status == ExerciseStatus.Completed);
                                    @if (isCompleted)
                                    {
                                        <i class="ph-fill ph-code text-success mx-1" style="padding-top: 0.1em; font-size: 1em;"></i>
                                    }
                                    else
                                    {
                                        <i class="ph-fill ph-code text-secondary mx-1" style="padding-top: 0.1em; font-size: 1em;"></i>
                                    }
                                }
                                else
                                {
                                    bool isCompleted = chapter.StudentStates.Any(s => s.StudentId == _student.Id);
                                    @if (isCompleted)
                                    {
                                        <i class="ph-fill ph-check-circle text-success me-1" style="padding-top: 0.1em; font-size: 1em;"></i>
                                    }
                                    else
                                    {
                                        <i class="ph ph-circle text-secondary me-1" style="padding-top: 0.1em; font-size: 1em;"></i>
                                    }
                                    
                                }
                                <span>@chapter.Title</span>
                            </button>
                        }
                    }
                    else
                    {
                        @: Chapters are nulll
                    }
                </nav>
            </nav>
        </div>
        <div class="col">
            <div class="d-flex justify-content-between align-items-center pt-3">
                @if (_selectedChapter is null)
                {
                    <p class="lead text-secondary">Выберите главу</p>
                }
                else
                {
                    <h4><em class="text-secondary">Глава</em> "@(_selectedChapter.Title)"</h4>
                }
            </div>
            @if (_selectedChapter is not null)
            {
                
                <article id="articlemd">
                </article>

                @if (_selectedChapter.IsExercise && _selectedImpl != null)
                {
                    <p class="table-dark">Чтобы скомпилировать и проверить задание нажмите кнопку "Отправить"</p>
                    <div class="col mb-3 py-1">
                        <div class="btn-toolbar my-2 d-flex justify-content-between align-items-center" role="toolbar" aria-label="Toolbar with button groups">
                            <div>
                                <div class="btn-group me-2" role="group">

                                    <button @onclick="Compile" disabled="@(_isLoading)" type="button" class="btn btn-primary">
                                        @if (_isLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            @:Компиляция...
                                        }
                                        else
                                        {
                                            <span class="oi oi-play-circle" style="top: 0.13em" aria-hidden="true"></span>
                                            @:Отправить
                                        }
                                    </button>
                                </div>
                                <div class="btn-group me-2" role="group">

                                    <button @onclick="() => SelectImpl(_selectedImpl ?? null)" type="button" class="btn btn-outline-primary">Очистить</button>

                                    <div class="btn-group" role="group">
                                        <button id="languageDropdown" type="button"
                                                class="btn btn-outline-primary dropdown-toggle"
                                                data-bs-toggle="dropdown" aria-expanded="false">
                                            @(_selectedImpl?.Language.Name??"Нет доступных языков")
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="languageDropdown">
                                            @foreach (var impl in _availableImpls)
                                            {
                                                <li>
                                                    <button class="dropdown-item" @onclick="() => SelectImpl(impl)">@impl.Language.Name</button>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            @if (_exerciseState != null)
                            {
                                @switch (_exerciseState.Status)
                                {
                                    case ExerciseStatus.Completed:
                                        <div class="text-success">
                                            <i class=" ph-fill ph-check-fat ms-1" style="padding-top: 0.2em; font-size: 1em;"></i>
                                            <strong class=" mx-1">Выполнено</strong>
                                        </div>
                                        break;
                                    case ExerciseStatus.Failed:
                                        <div class="text-danger">
                                            <i class=" ph-fill ph-x-circle ms-1" style="padding-top: 0.2em; font-size: 1em;"></i>
                                            <strong class=" mx-1">Провалено</strong>
                                        </div>
                                        break;
                                }
                            }
                        </div>
                        <div class="row">
                            <div class="flex-fill my-2" style="height: 30vh">
                                <CodeInput @bind-Code="_code" HeightInVh="40" StartCode="@_startCode" Language="@_selectedImpl.Language.HighlightLabel"/>
                            </div>
                            <div class="flex-fil" style="height: 20vh">
                                <textarea @bind="_output" class="py-2 px-4 rounded-3  code" disabled readonly style="height: 100%; width: 100%; resize: none;">log here</textarea>
                            </div>
                        </div>
                    </div>
                }
                
            }
            <div class="toolbar d-flex justify-content-between">
                @if (_selectedChapter != null && _course?.Chapters?.IndexOf(_selectedChapter) > 0)
                {
                    <button @onclick="PrevChapter" class="btn btn-outline-secondary align-items-center d-flex justify-content-center">
                        <i class="ph ph-caret-left me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                        <span>Назад</span>
                    </button>
                }

                @if (_selectedChapter != null
                     && _course?.Chapters?.IndexOf(_selectedChapter) < _course?.Chapters?.Count - 1)
                {
                    <button @onclick="NextChapter" class="btn btn-outline-primary align-items-center d-flex justify-content-center">
                        <span>Далее</span>
                        <i class="ph ph-caret-right ms-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    
    private Course? _course;
    private Chapter? _selectedChapter;

    private Student? _student;

    // --Exercise-- //
    private string? _startCode;
    private string? _code;
    private string? _output;
    private Impl? _selectedImpl;
    private List<Impl>? _availableImpls = new();
    private Exercise? _exercise;
    private ExerciseState? _exerciseState;
    private List<ExerciseState> _exerciseStates;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        _student = await StudentService.GetCurrentStudentAsync();
        _course = await CourseService.GetCourseAsync(Id);
        Logger.LogInformation($"Load course by student {_student.Id} {_student.User.GetFullName()} - {_course.Id} {_course.Title}, chapters count: {_course.Chapters.Count}");
        if(_course is null || _student is null)
        {
            NavigationManager.NavigateTo("404");
            return;
        }
        if (_course.Groups.All(x => x.Id != _student.GroupId)) throw new Exception("У вас нет доступа к этому курсу 📛");
        if(_course.Chapters.Count > 0) SelectChapter(_course.Chapters.FirstOrDefault(c=>c.StudentState(_student) == null) ?? _course.Chapters.First());
    }

    private async void SelectChapter(Chapter chapter)
    {
        _selectedChapter = chapter;
        if(chapter is null) return;
        await StudentService.UpdateChapterState(chapter, _student);
        
        if (_selectedChapter.IsExercise)
        {
            _exercise = _selectedChapter.Exercise;
            
            _exerciseStates = await StudentService.GetExerciseStatesAsync(_exercise, _student);
            _exerciseState = _exerciseStates.FirstOrDefault();
            
            _availableImpls = _exercise.Implementations;
            _selectedImpl = _exerciseState != null ? _availableImpls.FirstOrDefault(x=>x.LanguageId == _exerciseState.Impl.LanguageId) : _availableImpls.First();
            
            Logger.LogInformation($"Load exercise {_exercise.Id} with impls: [{string.Join(", ", _availableImpls.Select(i=>i.Language.Name))}] selected is: {_selectedImpl.Language.Name}");
            _startCode = _exerciseState?.CompileRequests.MaxBy(x => x.CreationTime)?.Code ?? _selectedImpl.TemplateCode;
            
            _code = _startCode;
        }
        
        await JsRuntime.InvokeVoidAsync("codeFunctions.parseMarkArticle", chapter.Body, "articlemd");
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender && _selectedChapter != null) 
            JsRuntime.InvokeVoidAsync("codeFunctions.parseMarkArticle", _selectedChapter.Body, "articlemd");
    }

    private void NextChapter()
    {
        if (_course == null || _selectedChapter == null || _course?.Chapters?.IndexOf(_selectedChapter) < _course?.Chapters?.Count - 1) return;
        var currentIndex = _course.Chapters.IndexOf(_selectedChapter);
        SelectChapter(_course.Chapters[currentIndex + 1]);
    }

    private void PrevChapter()
    {
        if (_course == null || _selectedChapter == null || _course?.Chapters?.IndexOf(_selectedChapter) > 0) return;
        var currentIndex = _course.Chapters.IndexOf(_selectedChapter);
        SelectChapter(_course.Chapters[currentIndex - 1]);
    }

    private void SelectImpl(Impl impl)
    {
        if(impl is null) return;
        _selectedImpl = impl;
        _startCode = _selectedImpl.TemplateCode;
        _code = _startCode;
        StateHasChanged();
    }

    private async Task Compile()
    {
        if (_selectedImpl is null || _student is null || _isLoading) return;
        _isLoading = true;
        var request = await ExerciseService.NewCompileRequest(_selectedImpl, _exerciseState, _student, _code);
        Logger.Log(LogLevel.Information, $"Create compileRequest [{request.Id}] \n with code: {request.Code} \n and tests: {request.Tests}");
        var result = await CompileService.QueueCompileRequest(request);
        _isLoading = false;
        _output = "";
        if (!string.IsNullOrEmpty(result.ResultOutput)) _output = $"Output: \n{result.ResultOutput}";
        if (!string.IsNullOrEmpty(result.ResultErrors)) _output += $"🚩Errors: \n{result.ResultErrors}";
        Logger.Log(LogLevel.Information, $"CR_ID[{request.Id}] Results received: {result.ResultOutput} with errors {result.ResultErrors}");
        (_, _exerciseState) = await ExerciseService.UpdateCompileRequest(result); // TODO: actually make independent service to process compile results and apply it to compile requests in db
        StateHasChanged();
    }

}