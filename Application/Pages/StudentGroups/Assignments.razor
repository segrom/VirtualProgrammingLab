@page "/assignments"
@using Application.Pages.StudentGroups.Components
@using Application.Services.Lecturers
@using Application.Shared.Utils
@using Common.Account
@using Common.Courses
@using Common.Lecturers
@using Common.Students
@using Application.Controllers
@attribute [Authorize(Roles = $"{RoleController.LecturerRole}")]
@inject ILecturerService LecturerService
@inject NavigationManager NavigationManager
@inject ILogger<Assignments> Logger
@inject IJSRuntime JsRuntime

<PageTitle>Группы</PageTitle>

<div class="container-md">
    <h1 class="display-3 my-5">Курсы и группы</h1>
    <div class="btn-toolbar d-flex justify-content-between my-3">
        <div class="btn-group">
             @if (_selectedCourses.Count > 0)
             {
                 <button class="btn btn-outline-primary align-items-center d-flex justify-content-center"
                         data-bs-toggle="modal" data-bs-target="#@AddGroupsModalId">
                     <i class="ph ph-plus me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                     <span>Добавить в выделенные курсы (@(_selectedCourses.Count))</span>
                 </button>
             }
        </div>
        <div class="btn-group">
            @if (_selectedGroups.Count > 0)
            {
                <button class="btn btn-outline-danger align-items-center d-flex justify-content-center"
                        data-bs-toggle="modal" data-bs-target="#@RemovingConfirmModalId">
                    <i class="ph ph-trash me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                    <span>Удалить выбранные группы (@(_selectedGroups.Count))</span>
                </button>
            }
        </div>
    </div>
    <div class="accordion accordion-flush " id="accordionFlush">
        @foreach (var course in _courses)
        {
            <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" @onclick="() => ToggleSelectionCourse(course)"
                        data-bs-toggle="collapse" data-bs-target="#flush-collapse@(course.Id)" aria-expanded="false" aria-controls="flush-collapse@(course.Id)">
                    @if(_selectedCourses.Contains(course))
                    {
                        <i class="ph-fill ph-check-fat me-2" style="padding-top: 0.12em; font-size: 1.2em;"></i>
                    }
                    <strong class="me-2">@course.Title</strong>
                    <span class="mx-2 badge text-bg-secondary align-items-center d-flex justify-content-center">
                        <i class="ph-bold ph-users-three me-1" style="padding-top: 0.12em; font-size: 1.2em;"></i>
                        <span>@course.Groups.Count</span>
                    </span>
                    <span class="mx-2 badge text-bg-secondary align-items-center d-flex justify-content-center">
                        <i class="ph-bold ph-user me-1" style="padding-top: 0.12em; font-size: 1.2em;"></i>
                        <span>@(course.Groups.Sum(g => g.Students.Count))</span>
                    </span>
                </button>
            </h2>
            <div id="flush-collapse@(course.Id)" class="accordion-collapse collapse">
                <ul class="list-group list-group-flush m-3">
                    @foreach (var group in course.Groups)
                    {
                        <li class="list-group-item d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center justify-content-start">
                                <input @onchange="args => ChangeSelectionValueOnGroup(course, group, args.Value)" class="form-check-input me-2" type="checkbox" id="@($"{course.Id}.{group.Id}Id")">
                                <label for="@($"{course.Id}.{group.Id}Id")">@group.Name</label>
                            </div>
                            <button class="btn btn-dark align-items-center d-flex justify-content-center">
                                <span>Открыть</span>
                                <i class="ph ph-caret-right ms-1" style="padding-top: 0.16em; font-size: 1.2em;"></i>
                            </button>
                        </li>
                    }
                </ul>
            </div>
        </div>
        }
    </div>
</div>

<AddGroupsToCoursesModal ModalId="@AddGroupsModalId" Courses="@_selectedCourses" Refresh="Refresh"/>

<ConfirmationModal ModalId="@RemovingConfirmModalId" OnSuccess="RemoveSelected">
    <Title>
        <span>Подтверждение</span>
    </Title>
    <Body>
    <p> Вы уверены что хотите убрать:</p><br/>
    <ul class="list-group">
        @foreach (var p in _selectedGroups)
        {
            <li class="list-group-item"> @(p.Item2.Name) из @(p.Item1.Title)</li>
        }
    </ul>
    </Body>
</ConfirmationModal>

@code {
    
        private const string RemovingConfirmModalId = "RemovingConfirmModal";
        private const string AddGroupsModalId = "AddGroupsModal";
    
    private List<Course> _courses = new();
    private Lecturer? _lecturer;

    private readonly List<(Course, StudentGroup)> _selectedGroups = new();
    private readonly List<Course> _selectedCourses = new();

    protected override async Task OnInitializedAsync()
    {
        _lecturer = await LecturerService.GetCurrentLecturerAsync();
        if(_lecturer is null)
        {
            NavigationManager.NavigateTo("404");
            return;
        }
        _courses = await LecturerService.GetLecturerCoursesIncludeGroupsAsync(_lecturer);
    }

    private void ChangeSelectionValueOnGroup(Course course, StudentGroup group, object? value)
    {
        if (value is not  bool v) throw new Exception($"Input rend strange value: {value.GetType()}");
        if (v)
        {
            _selectedGroups.Add((course, group));
        }
        else
        {
            _selectedGroups.Remove((course, group));
        }
    }

    private async void RemoveSelected()
    {
        foreach (var (course, group) in _selectedGroups)
        {
            await LecturerService.RemoveCourseFromGroup(course, group);
        }
        _selectedGroups.Clear();
        _courses = await LecturerService.GetLecturerCoursesIncludeGroupsAsync(_lecturer);
        StateHasChanged();
    }

    private void ToggleSelectionCourse(Course course)
    {
        if(_selectedCourses.Contains(course)) 
            _selectedCourses.Remove(course);
        else
            _selectedCourses.Add(course);
    }

    private async void Refresh()
    {
        _courses = await LecturerService.GetLecturerCoursesIncludeGroupsAsync(_lecturer);
        StateHasChanged();
    }

}