@page "/assignments"
@using Application.Services.Lecturers
@using Common.Courses
@using Common.Lecturers
@using Common.Students
@using Application.Controllers
@using System.Text.RegularExpressions
@using Application.Services.Students
@attribute [Authorize(Roles = $"{RoleController.LecturerRole}")]
@inject ILecturerService LecturerService
@inject IStudentService StudentService
@inject NavigationManager NavigationManager
@inject ILogger<Assignments> Logger
@inject IJSRuntime JsRuntime

<PageTitle>Назначения</PageTitle>

<div class="container-md">
    <h1 class="display-3 my-5">Назначения</h1>
    <div class="d-flex">
        <div class="col-6 me-2">
            <div class="btn-toolbar d-flex align-items-center justify-content-between">
                <h4>Курсы</h4>
                <div class="input-group">
                    <input @bind="_courseFilter" type="text" class="form-control" placeholder="Поиск" aria-label="Username" aria-describedby="basic-addon1">
                    <button class="btn btn-outline-secondary align-items-center d-flex justify-content-center">
                        <i class="ph ph-x" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                    </button>
                </div>
            </div>
            <ul class="list-group  mt-2">
                @foreach (var course in _courses)
                {
                    <button @onclick="() => SelectCourse(course)" type="button" class="@(_selectedCourse?.Id == course.Id ? "active": "") list-group-item list-group-item-action d-flex align-items-center justify-content-start">
                        <strong class="me-2">@course.Title</strong>
                        <span class="mx-2 badge text-bg-secondary align-items-center d-flex justify-content-center">
                            <i class="ph-bold ph-users-three me-1" style="padding-top: 0.12em; font-size: 1.2em;"></i>
                            <span>@course.Groups.Count</span>
                        </span>
                        <span class="mx-2 badge text-bg-secondary align-items-center d-flex justify-content-center">
                            <i class="ph-bold ph-user me-1" style="padding-top: 0.12em; font-size: 1.2em;"></i>
                            <span>@course.Groups.Sum(g=>g.Students.Count)</span>
                        </span>
                    </button>
                }
            </ul>
        </div>
        <div class="col-6 ms-2">
            @if (_selectedCourse != null)
            {
                @if (_isEditing)
                {
                    <div class="btn-toolbar d-flex align-items-center justify-content-between">
                        <h4>Назначенные группы</h4>
                        <div class="input-group">
                            <button class="btn btn-primary align-items-center d-flex justify-content-center" type="button"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="ph ph-plus me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                                <span>Добавить</span>
                            </button>
                            <ul class="dropdown-menu pt-0"
                                aria-labelledby="dropdownMenuButton1">
                                <input @bind="_groupsFilter" type="text"
                                       class="form-control border-0 border-bottom shadow-none mb-2" placeholder="Search..."
                                       oninput="">
                                @foreach (var group in _allGroups)
                                {
                                    <li>
                                        <button @onclick="() => AddGroupToCourse(group, _selectedCourse)" class="dropdown-item" type="button">@group.Name</button>
                                    </li>
                                }
                            </ul>
                            <button @onclick="ToggleEditingMode" class="btn btn-primary align-items-center d-flex justify-content-center">
                                <i class="ph ph-floppy-disk me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                                <span>Сохранить</span>
                            </button>
                        </div>
                    </div>
                    <ul class="list-group  mt-2">
                        @foreach (var group in _selectedCourse.Groups)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div class="d-flex justify-content-start align-items-center">
                                    <span>@group.Name</span>
                                    <span class="mx-2 badge text-bg-secondary align-items-center d-flex justify-content-center">
                                        <i class="ph-bold ph-user me-1" style="padding-top: 0.12em; font-size: 1.2em;"></i>
                                        <span>@group.Students.Count</span>
                                    </span>
                                </div>
                                <button @onclick="() => RemoveGroupFromCourse(group, _selectedCourse)" class="btn btn-outline d-flex justify-content-between align-items-center">
                                    <i class="ph ph-x my-1"></i>
                                </button>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="btn-toolbar d-flex align-items-center justify-content-between">
                        <h4>Назначенные группы</h4>
                        <div class="btn-group" role="group" aria-label="Basic example">
                            <button @onclick="ToggleEditingMode" class="btn btn-primary align-items-center d-flex justify-content-center">
                                <i class="ph ph-pencil-simple me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                                <span>Редактировать</span>
                            </button>
                        </div>
                    </div>
                    <div class="accordion mt-2" id="accordionExample">
                        @foreach (var group in _selectedCourse.Groups)
                        {
                            <div class="accordion-item">
                            <h2 class="accordion-header ">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#collapse@(group.Id)" aria-expanded="false" aria-controls="collapse@(group.Id)">
                                    <span>@group.Name</span>
                                    <span class="mx-2 badge text-bg-secondary align-items-center d-flex justify-content-center">
                                        <i class="ph-bold ph-user me-1" style="padding-top: 0.12em; font-size: 1.2em;"></i>
                                        <span>@group.Students.Count</span>
                                    </span>
                                    @{ var groupFinishedStudents = _studentsProgress
                                           .Where(s => s.Key.GroupId == group.Id)
                                           .Count(s => s.Value.Finished == s.Value.All); }
                                    <div class="progress w-50 ms-3" role="progressbar" aria-label="Example with label"
                                         aria-valuenow="@((int)(groupFinishedStudents / (float) group.Students.Count * 100f))" aria-valuemin="0" aria-valuemax="100">
                                        <div class="progress-bar @(groupFinishedStudents == group.Students.Count ? "bg-success" : "")" style="width: @((int)(groupFinishedStudents / (float) group.Students.Count * 100f))%">@(groupFinishedStudents)/@(group.Students.Count)</div>
                                    </div>
                                </button>
                            </h2>
                            <div id="collapse@(group.Id)" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    @foreach (var student in group.Students)
                                    {
                                        <div class="my-1 d-flex justify-content-between align-items-center">
                                            <span>@student.User.GetFullName()</span>
                                            @{ var studentProgress = _studentsProgress[student]; }
                                            <div class="progress w-50" role="progressbar" aria-label="Example with label" aria-valuenow="@((int)(studentProgress.Finished / (float)studentProgress.All * 100f))" aria-valuemin="0" aria-valuemax="100">
                                                <div class="progress-bar @(studentProgress.Finished == studentProgress.All ? "bg-success" : "")" style="width: @((int)(studentProgress.Finished / (float)studentProgress.All * 100f))%">@(studentProgress.Finished)/@(studentProgress.All)</div>
                                            </div>
                                        </div> 
                                    }
                                </div>
                            </div>
                        </div>
                        }
                        
                    </div>
                }
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center mt-3">
                    <h4 class="text-secondary">
                        Выберите курс для редактироваия 🧩
                    </h4>
                </div>
            }

        </div>
    </div>
</div>

@code {
    
        private const string RemovingConfirmModalId = "RemovingConfirmModal";
        private const string AddGroupsModalId = "AddGroupsModal";

    private bool _isEditing;
    private List<Course> _courses = new();
    private Lecturer? _lecturer;

    private string _groupsFilter;
    private string _courseFilter;
    
    private List<StudentGroup> _allGroups;
    private Course? _selectedCourse;
    private readonly Dictionary<Student, (int Finished,int All)> _studentsProgress = new();

    protected override async Task OnInitializedAsync()
    {
        _lecturer = await LecturerService.GetCurrentLecturerAsync();
        _allGroups = await LecturerService.GetAllGroups();
        if(_lecturer is null)
        {
            NavigationManager.NavigateTo("404");
            return;
        }
        _courses = await LecturerService.GetLecturerCoursesIncludeGroupsAsync(_lecturer);
    }

    private async void Refresh()
    {
        _courses = await LecturerService.GetLecturerCoursesIncludeGroupsAsync(_lecturer);
        await SelectCourse(_courses.First(c => c.Id == _selectedCourse.Id));
        StateHasChanged();
    }

    private async void RemoveGroupFromCourse(StudentGroup group, Course selectedCourse)
    {
        Logger.LogInformation("Remove group {0} from course {1}", group, selectedCourse);
        await LecturerService.RemoveCourseFromGroup(selectedCourse, group);
        Refresh();
    }

    private void ToggleEditingMode()
    {
        _isEditing = !_isEditing;
    }

    private async Task AddGroupToCourse(StudentGroup group, Course selectedCourse)
    {
        await LecturerService.AddCourseToGroup(selectedCourse, group);
        Refresh();
    }

    private async Task SelectCourse(Course course)
    {
        _studentsProgress.Clear();
        _selectedCourse = course;
        foreach (var group in _selectedCourse.Groups)
        {
            foreach (var student in group.Students)
            {
                _studentsProgress[student] = await StudentService.GetStudentCourseProgress(student, _selectedCourse);
            }
        }
    }

}