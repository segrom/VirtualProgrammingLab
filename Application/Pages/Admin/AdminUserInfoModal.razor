@using Microsoft.AspNetCore.Identity
@using Application.Data.Account
@inject UserManager<IdentityUser> UserManager
@inject ILogger<AdminUserInfoModal> Logger

<!-- Modal -->
<div class="modal fade " id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <EditForm OnValidSubmit="Submit" class="modal-content" Model="_model">
            <DataAnnotationsValidator/>
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Пользователь @(_model.Code)</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Код</label>
                    <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="_model.Code">
                    <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
                    <ValidationMessage For="() => _model.Code"></ValidationMessage>
                </div>
                <div class="row mb-3">
                    <label class="form-label">ФИО</label>
                    <div class="col">
                        <input type="text" class="form-control" placeholder="Имя" aria-label="Имя" @bind="_model.Name">
                        <ValidationMessage For="() => _model.Name"></ValidationMessage>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control" placeholder="Фамилия" aria-label="Фамилия" @bind="_model.Surname">
                        <ValidationMessage For="() => _model.Surname"></ValidationMessage>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control" placeholder="Отчество" aria-label="Отчество" @bind="_model.Patronymic">
                        <ValidationMessage For="() => _model.Patronymic"></ValidationMessage>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="exampleInputPassword1" class="form-label">Password</label>
                    <input type="text" class="form-control" id="exampleInputPassword1" @bind="_model.Password">
                    <ValidationMessage For="() => _model.Password"></ValidationMessage>
                </div>
                <InputSelect @bind-Value="@_model.Role" class="form-select" aria-label="Default select example">

                    @foreach (var role  in Enum.GetValues(typeof(UserRole)))
                    {

                        <option value="@role">@role</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _model.Role"></ValidationMessage>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button class="btn btn-primary" type="submit" data-bs-dismiss="modal">Save changes</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    
    
    
    [Parameter]
    public Admin.User? User
    {
        set => _model = new UserFormModel(value);
    }
    UserFormModel _model = new();

    private async Task Submit()
    {
        
        IdentityUser user;
        if (_model.Origin is { } userBase)
        {
            user = userBase.Base;
            user.UserName = _model.Code;
            Logger.LogInformation("User {0} updated", user.UserName);
        }
        else
        {
            user = new IdentityUser(_model.Code);
            var result = await UserManager.CreateAsync(user, _model.Password);
            if (!result.Succeeded)
            {
                Logger.LogError("Error creation user {0}: {1}", user.UserName, string.Join(", ", result.Errors));
                return;
            }
            Logger.LogInformation("Created new user {0}", user.UserName);
        }

        await UserManager.RemoveFromRolesAsync(user, new[]
        {
            RoleController.AdminRole,
            RoleController.LecturerRole,
            RoleController.StudentRole
        });
        
        switch (_model.Role)
        {
            case UserRole.Admin:
                await UserManager.AddToRoleAsync(user, RoleController.AdminRole);
                await UserManager.AddToRoleAsync(user, RoleController.LecturerRole);
                await UserManager.AddToRoleAsync(user, RoleController.StudentRole);
                break;
            case UserRole.Lecturer:
                await UserManager.AddToRoleAsync(user, RoleController.LecturerRole);
                await UserManager.AddToRoleAsync(user, RoleController.StudentRole);
                break;
            case UserRole.Student:
                await UserManager.AddToRoleAsync(user, RoleController.StudentRole);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

}