@page "/admin/manage-users"
@using Microsoft.AspNetCore.Identity
@using Application.Pages.Admin.Components
@using Application.Services.Admin
@using Common.Account
@using Common.Common
@using Common.Lecturers
@using Common.Students
@using Microsoft.EntityFrameworkCore
@using Application.Controllers
@attribute [Authorize(Roles = $"{RoleController.AdminRole}")]
@inject UserManager<User> UserManager
@inject IJSRuntime JsRuntime
@inject IAdminService AdminService
@inject ILogger<ManageUsers> Logger
@namespace Application.Pages.Admin
<div class="container">
    <h2 class="my-3">Управление пользователями</h2>
    <div class="row">

        <div class="btn-toolbar my-2" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group me-2" role="group">
                <div class="dropdown mx-1">
                    <button class="dropdown-toggle btn btn-primary align-items-center d-flex justify-content-center" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="ph ph-plus me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                        <span>Новый</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <button class="dropdown-item" data-bs-toggle="modal" @onclick="() => { _selectedStudent = null; ShowModal(StudentModalId); }">Студент</button>
                        </li>
                        <li>
                            <button class="dropdown-item" data-bs-toggle="modal" @onclick="() => { _selectedLecturer = null; ShowModal(LecturerModalId); }">Преподаватель</button>
                        </li>
                        <li>
                            <button class="dropdown-item disabled" disabled>Админ</button>
                        </li>
                    </ul>
                </div>
                <div class="dropdown mx-1">
                    <button class="dropdown-toggle btn btn-primary align-items-center d-flex justify-content-center" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="ph ph-plus me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                        <span>Импорт</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <button class="dropdown-item" data-bs-toggle="modal" @onclick="() => {ShowModal(ImportStudentsModalId); }">Студенты</button>
                        </li>
                        <li>
                            <button class="dropdown-item disabled" disabled >Преподаватели</button>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="btn-group me-2" role="group">

                <button type="button" class="btn btn-outline-primary align-items-center d-flex justify-content-center" disabled>
                    <i class="ph ph-magnifying-glass me-1" style="padding-top: 0.13em; font-size: 1.2em;"></i>
                    <span>Найти</span>
                </button>


                <div class="btn-group" role="group">
                    <button id="btnGroupDrop1" type="button" class="btn btn-outline-primary dropdown-toggle disabled" disabled
                            data-bs-toggle="dropdown" aria-expanded="false">
                        Все
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark disabled" disabled aria-labelledby="btnGroupDrop1">
                        <li><a class="dropdown-item" href="#">Все</a></li>
                        <li><a class="dropdown-item disabled" disabled="true" href="#">Студенты</a></li>
                        <li><a class="dropdown-item disabled" disabled="true" href="#">Преподаватели</a></li>
                    </ul>
                </div>
            </div>
        </div>
        
    </div>
    <table class="table">
        <thead>
        <tr>
            <th scope="col">Код</th>
            <th scope="col">ФИО</th>
            <th scope="col">Группа/Факультет</th>
            <th scope="col">Роль</th>
            <th scope="col">Запросы компиляции</th>
            <th scope="col">Последняя активность</th>
            <th scope="col">Действия</th>
        </tr>
        </thead>
        <tbody>
        @if (_users is null || _users.Length == 0)
        {
            <p>Нет пользователей</p>
        }
        else
        {
            @foreach (var user in _users)
            {
                <tr>
                    <th scope="row">
                        @user.Base.Code
                    </th>
                    <td>@user.Base.GetShortName()</td>
                    <td>
                        @if (user.Base.Student != null)
                        {
                            <em class="text-secondary">
                                @(user.Base.Student.Group.Name)
                            </em>
                        }
                        @if (user.Base.Lecturer != null)
                        {
                            <em class="text-secondary">
                                @(user.Base.Lecturer.Faculty)
                            </em>
                        }
                    </td>
                    <td>@string.Join(", ", user.Roles)</td>
                    <td>@user.CompileRequests.Count</td>
                    <td>@user.Base.ActivityDate.LocalDateTime.ToString("u")</td>
                    <td class="d-flex align-items-center justify-content-center">
                        <button class="btn btn-outline-primary mx-1"
                                @onclick="() => { if (user.Base.Lecturer != null) _selectedLecturer = user.Base.Lecturer; else _selectedStudent = user.Base.Student; ShowModal(user.Base.Lecturer != null ? LecturerModalId : StudentModalId); }">
                            Изменить
                        </button>
                        <button class="btn btn-outline-warning  mx-1"
                                @onclick="() => { _selectedUser = user.Base; ShowModal(ChangePasswordModalId); }">
                            Пароль
                        </button>
                        <UserDeleteButton User="@user.Base" OnSuccess="Refresh"/>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

<AdminStudentModal ModalId="@StudentModalId" Student="@_selectedStudent" OnSuccess="Refresh"/>
<AdminLecturerModal ModalId="@LecturerModalId" Lecturer="@_selectedLecturer" OnSuccess="Refresh"/>
<AdminImportModal ModalId="@ImportStudentsModalId" OnSuccess="Refresh"/>
<AdminChangePasswordModal ModalId="@ChangePasswordModalId" User="@_selectedUser" OnSuccess="Refresh"/>

@code {

        public const string LecturerModalId = "LecturerModal";
        public const string StudentModalId = "StudentModal";
        public const string ImportStudentsModalId = "ImportStudentsModal";
        public const string ChangePasswordModalId = "ChangePasswordModal";
    
    public struct UserWithRoles
    {
        public User Base;
        public string[] Roles;
        public List<CompileRequest> CompileRequests;
    }

    private Student? _selectedStudent;
    private Lecturer? _selectedLecturer;
    private User? _selectedUser;
    
    private UserWithRoles[]? _users;

    protected override async Task OnParametersSetAsync()
    {
        await GetUsers();
        await base.OnParametersSetAsync();
    }

    private async Task ShowModal(string modalId)
    {
        await JsRuntime.InvokeVoidAsync("codeFunctions.showModal", modalId);
    }
    
    private async Task GetUsers()
    {
        var bases = await UserManager.Users
            .Include(u => u.Student)
                .ThenInclude(s=>s.Group)
            .Include(u => u.Lecturer)
            .ToArrayAsync();
        _users = new UserWithRoles[bases.Length];
        for (int i = 0; i < bases.Length; i++)
        {
            _users[i] = new UserWithRoles()
            {
                Base = bases[i],
                Roles = (await UserManager.GetRolesAsync(bases[i])).ToArray(),
                CompileRequests = await AdminService.GetUserCompileRequests(bases[i])
            };
        }
    }

    private async void Refresh()
    {
        await GetUsers();
        StateHasChanged();
    }

}