@page "/admin"
@using Microsoft.AspNetCore.Identity
@using Application.Data.Account
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = $"{RoleController.AdminRole}")]
@inject UserManager<IdentityUser> UserManager
@inject ILogger<Admin> Logger

<div class="container">
    <h2 class="my-3">Управление пользователями</h2>
    <div class="row">

        <div class="btn-toolbar my-2" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group me-2" role="group">

                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => _selectedUser = null">
                    <span class="oi oi-plus" style="top: 0.13em" aria-hidden="true"></span>
                    Добавить
                </button>
            </div>
            <div class="btn-group me-2" role="group">

                <button type="button" class="btn btn-outline-primary">
                    <span class="oi oi-magnifying-glass disabled" disabled style="top: 0.13em" aria-hidden="true"></span>
                    Найти</button>


                <div class="btn-group" role="group">
                    <button id="btnGroupDrop1" type="button" class="btn btn-outline-primary dropdown-toggle disabled" disabled
                            data-bs-toggle="dropdown" aria-expanded="false">
                       Все
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark disabled" disabled aria-labelledby="btnGroupDrop1">
                        <li><a class="dropdown-item" href="#">Все</a></li>
                        <li><a class="dropdown-item disabled" disabled="true" href="#">Студенты</a></li>
                        <li><a class="dropdown-item disabled" disabled="true" href="#">Преподаватели</a></li>
                    </ul>
                </div>
            </div>
        </div>
        
    </div>
    <table class="table">
        <thead>
        <tr>
            <th scope="col">№</th>
            <th scope="col">Код</th>
            <th scope="col">ФИО</th>
            <th scope="col">Роль</th>
            <th scope="col">Последняя активность</th>
            <th scope="col">Действия</th>
        </tr>
        </thead>
        <tbody>
        @if (_users is null || _users.Length == 0)
        {
            <p>No users</p>
        }
        else
        {
            @foreach (var user in _users)
            {
                <tr>
                    <th scope="row">@user.Base.Email</th>
                    <td>@user.Base.UserName</td>
                    <td>@user.Base.Email</td>
                    <td>@string.Join(", ", user.Roles)</td>
                    <td>N/D</td>
                    <td class="btn-group">
                        <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => _selectedUser = user">Изменить</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user)">Удалить</button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>
<AdminUserInfoModal User="@_selectedUser"/>

@code {

    public struct User
    {
        public IdentityUser Base;
        public string[] Roles;
    }

    private User? _selectedUser;
    
    private User[]? _users;
    
    protected override async Task OnInitializedAsync()
    {
        var bases = await UserManager.Users.ToArrayAsync();
        _users = new User[bases.Length];
        for (int i = 0; i < bases.Length; i++)
        {
            _users[i] = new User()
            {
                Base = bases[i],
                Roles = (await UserManager.GetRolesAsync(bases[i])).ToArray()
            };
        }
    }

    private async void DeleteUser(User user)
    {
        var result = await UserManager.DeleteAsync(user.Base);

        if (result.Succeeded)
        {
            Logger.LogWarning("Delete user {0}", user.Base.UserName);
            return;
        }
        
        Logger.LogError("Failed Delete user {0}: {1}", user.Base.UserName, result.Errors);
        StateHasChanged();
    }

}