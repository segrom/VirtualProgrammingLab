@using Application.Services.Admin
@using System.ComponentModel.DataAnnotations
@using Common.Account
@inject IAdminService AdminService
@inject IJSRuntime JsRuntime
@inject ILogger<AdminStudentModal> Logger
@namespace Application.Pages.Admin
<!--@ModalId -->
@if (User is not null)
{
    <div class="modal fade " id="@ModalId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <EditForm OnValidSubmit="Submit" class="modal-content" Model="User">
                <DataAnnotationsValidator/>
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Изменение пароля для @(User.UserName)</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="exampleInputPassword1" class="form-label">Новый пароль</label>
                        <input type="password" class="form-control" id="exampleInputPassword1" @bind="_model.Pass">
                        <ValidationMessage For="() => _model.Pass"></ValidationMessage>
                    </div>
                    <div class="mb-3">
                        <label for="exampleInputPassword2" class="form-label">Повтор пароля</label>
                        <input type="password" class="form-control" id="exampleInputPassword2" @bind="_model.Pass2">
                        <ValidationMessage For="() => _model.Pass2"></ValidationMessage>
                    </div>
                    @if (_errors is not null)
                    {
                        <div class="text-danger">@_errors</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button class="btn btn-primary" type="submit">Сохранить</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    
    public class ChangePasswordForm
    {
        [Required]
        public string Pass { get; set; }
        [Required]
        public string Pass2 { get; set; }
    }
    
    [Parameter] public string ModalId { get; set; }
    [Parameter] public Action? OnSuccess { get; set; }

    [Parameter]
    public User? User { get; set; }

    private ChangePasswordForm _model = new ChangePasswordForm();
    private string? _errors;
    
    private async Task Submit()
    {
        _errors = null;
        if (!_model.Pass.Equals(_model.Pass2))
        {
            _errors = "Пароли должны быть одинаковыми";
            return;
        }
        try
        {
            await AdminService.ChangePassword(User, _model.Pass);
            OnSuccess?.Invoke();
            await JsRuntime.InvokeVoidAsync("codeFunctions.hideModal", ModalId);
            _model = new ChangePasswordForm();
        }
        catch (Exception e)
        {
            _errors = "Ошибка\n"+e.Message;
        }
        
    }

}