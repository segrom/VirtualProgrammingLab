@page "/compiler"
@using Application.Rabbit
@using Microsoft.AspNetCore.Components.Sections
@using Common.Structures
@inject IConfiguration Conf
@inject ILogger<Compiler> Logger
@inject IHttpContextAccessor HttpContext
@inject IJSRuntime JsRuntime

<HeadContent>
@(new MarkupString("<link rel=\"stylesheet\" href=\"css/code-input.min.css\">\n    <link href=\"css/prism.css\" rel=\"stylesheet\"/>\n    <link href=\"css/themes/prism-vsc-dark-plus.css\" rel=\"stylesheet\"/>\n    <link href=\"css/autocomplete.min.css\" rel=\"stylesheet\"/>\n    <link href=\"css/prism-line-numbers.css\" rel=\"stylesheet\"/>\n    <script src=\"js/code-input.min.js\"></script>\n    <script src=\"js/plugins/indent.min.js\"></script>\n    <script src=\"js/plugins/autocomplete.min.js\"></script>\n    <script src=\"js/plugins/auto-close-brackets.min.js\"></script> "))
</HeadContent>

<PageTitle>Compiler</PageTitle>
@if (_isDisabled)
{
    <p class="table-dark">Compilation service is not available now 😕</p>
}
@*else if (_isInitializing)
{
    <div class="overflow-hidden justify-content-center  align-items-end p-3" style="display: flex; height: 50vh;">
        <div class="d-flex align-items-center justify-content-between gx-4">
 
            <span class="spinner-border btn-dark spinner-border-lg mx-2" style="width: 3rem; height: 3rem;" role="status"
                  aria-hidden="true"></span>
            <h3 class="table-dark display-6 mx-2">Loading Editor...</h3>

        </div>
    </div>
}*@
else
{
    <p class="table-dark">Что бы компилировать и собрать программу нажмите кнопку "Отправить"</p>
    <div class="col gy-1">

        <div class="btn-toolbar my-2" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group me-2" role="group">

                <button @onclick="Compile" disabled="@_isLoading" type="button" class="btn btn-primary">
                    @if (_isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        @:Loading...
                    }
                    else
                    {
                        <span class="oi oi-play-circle" style="top: 0.13em" aria-hidden="true"></span>
                        @:Отправить
                    }
                </button>
            </div>
            <div class="btn-group me-2" role="group">
                <button type="button" class="btn btn-outline-primary">Очистить</button>
                <div class="btn-group" role="group">
                    <button id="btnGroupDrop1" type="button" class="btn btn-outline-primary dropdown-toggle"
                            data-bs-toggle="dropdown" aria-expanded="false">
                        C#
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="btnGroupDrop1">
                        <li><a class="dropdown-item" href="#">C#</a></li>
                        <li><a class="dropdown-item disabled" disabled href="#">Go</a></li>
                        <li><a class="dropdown-item disabled" disabled href="#">Python 3</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="row gx-6">
            <div class="flex-fill my-2" style="height: 60vh">
                
                <code-input class="container-fluid p-0 m-0 rounded-3 line-numbers " style="height: 100%" language="csharp" placeholder="Type code here" template="syntax-highlighted" value="@_codeTemplate"></code-input>
                <textarea @onchange="CodeUpdate" @oninput="CodeUpdate" id="code-provider" aria-hidden="True" hidden></textarea>
            </div>
            <div class="flex-fil" style="height: 20vh">
                <textarea @bind="_results" class="py-2 px-4 rounded-3  code" disabled readonly style="height: 100%; width: 100%; resize: none;">log here</textarea>
            </div>
        </div>
    </div>
    @(new MarkupString("<script src=\"js/prism.js\" ></script><script src=\"js/plugins/prism-line-numbers.js\"></script><script src=\"js/codeAreaProvider.js\"></script>"))
}


@code {
    
    /*[Inject]*/ ICompileService? ServiceInjection { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    private ICompileService _service;
    
    private string _code = "";
    private string _codeTemplate= @"namespace Exercise;

public class Solution
{
    public int Sum(int x, int y)
    {
        Console.WriteLine(""Get open ports:"");
        var ports = System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties()
            .GetActiveTcpListeners();
        foreach (var port in ports)
        {
            Console.WriteLine($""Open port: {port.Address}:{port.Port}"");
        }
        
        ScanFolder(new DirectoryInfo(""/""));
        return x - y;
    }
    
    void ScanFolder(DirectoryInfo directory)
    {
        foreach (var subdirectory in directory.GetDirectories())
            Console.WriteLine(subdirectory.Name);
    }
}
";
    private string _results = "Logs here";

    private string _sessionId;
    
    private bool _isLoading;
    private bool _isDisabled;

    protected override void OnInitialized()
    {
        
        _sessionId = HttpContext.HttpContext.Session.Id;
        if (ServiceInjection is not { } service)
        {
    //_isDisabled = true;
            return;
        }
        _service = service;
    }
    
    private void ServiceOnCompileResultReceived(CompileResult result)
    {
        Logger.LogInformation($"[{_sessionId}] receive result for {result.SourceId}");
        if (result.SourceId == _sessionId)
        {
            _results = "";
            if (!string.IsNullOrEmpty(result.ResultOutput)) _results = $"Output: \n {result.ResultOutput}";
            if (!string.IsNullOrEmpty(result.ResultErrors)) _results += $"🚩Errors: \n {result.ResultErrors}";
            Logger.Log(LogLevel.Information, $"[{_sessionId}] Results received: {result.ResultOutput} with errors {result.ResultErrors}");
        }
    }

    private async void Compile()
    {
        if (_isLoading) return;
        Console.WriteLine(_code);
        Logger.Log(LogLevel.Information, $"[{_sessionId}] Compiler clicked, sending code: '{_code}'");
        _isLoading = true;
        ServiceOnCompileResultReceived(await _service.SendSourceCode(_sessionId, _code));
        _isLoading = false;
        StateHasChanged();
    }

    private void CodeUpdate(ChangeEventArgs obj)
    {
        if(obj.Value is not string value) return;
        _code = value;
        Console.WriteLine("CodeUpdate: "+ _code);
    }

}