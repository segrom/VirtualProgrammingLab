@page "/compiler"
@using Application.Services.Compile
@using Common.QueueStructures
@attribute [Authorize]
@inject ILogger<Compiler> Logger

<PageTitle>Компилятор</PageTitle>
@if (_isDisabled)
{
    <p class="table-dark">Compilation service is not available now 😕</p>
    @if (!string.IsNullOrEmpty(_disabledError))
    {
        <p class="alert alert-danger">@_disabledError</p>
    }
}
else
{
    <p>Что бы компилировать и собрать программу нажмите кнопку "Отправить"</p>
    <div class="col gy-1">

        <div class="btn-toolbar my-2" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group me-2" role="group">

                <button @onclick="Compile" disabled="@(_isLoading || true)" type="button" class="btn btn-primary"> 
                    @if (_isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        @:Компиляция...
                    }
                    else
                    {
                        <span class="oi oi-play-circle" style="top: 0.13em" aria-hidden="true"></span>
                        @:Отправить
                    }
                </button>
            </div>
            <div class="btn-group me-2" role="group">
                <button type="button" class="btn btn-outline-primary">Очистить</button>
                <div class="btn-group" role="group">
                    <button id="btnGroupDrop1" type="button" class="btn btn-outline-primary dropdown-toggle"
                            data-bs-toggle="dropdown" aria-expanded="false">
                        C#
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="btnGroupDrop1">
                        <li><a class="dropdown-item" href="#">C#</a></li>
                        <li><a class="dropdown-item disabled" disabled href="#">Go</a></li>
                        <li><a class="dropdown-item disabled" disabled href="#">Python 3</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="row gx-6">
            <div class="flex-fill my-2" style="height: 60vh">
                
                <CodeInput @bind-Code="_code" StartCode="@_codeTemplate" />
               
            </div>
            <div class="flex-fil" style="height: 20vh">
                <textarea @bind="_results" class="py-2 px-4 rounded-3  code" disabled readonly style="height: 100%; width: 100%; resize: none;">log here</textarea>
            </div>
        </div>
    </div>
}


@code {

    [Inject]
    ICompileService? ServiceInjection { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    private ICompileService _service;

    private string _code = "";

    private string _codeTemplate="";

    private string _results = "Logs here";

    private string _exerciseId = "1";
    private string _solutionId;

    private bool _isLoading;
    private bool _isDisabled;
    private string _disabledError;


    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        if (!(user.Identity?.IsAuthenticated ?? false) || user.Identity.Name is null)
        {
            NavigationManager.NavigateTo($"/login");
        }

        if (user.Identity is null)
        {
            _isDisabled = true;
            _disabledError = "Error: your account not found";
            return;
        }

        _solutionId = $"E{_exerciseId}.S{user.Identity.Name ?? Guid.NewGuid().ToString()}";
        if (ServiceInjection is not { } service)
        {
            _isDisabled = true;
            return;
        }
        _service = service;
        _code = _codeTemplate;
    }

    private void ServiceOnCompileResultReceived(QueueCompileResult result)
    {
        Logger.LogInformation($"[{_solutionId}] receive result for {result.CompileRequestId}");
        /*if (result.CompileRequestId == _solutionId)
        {
            _results = "";
            if (!string.IsNullOrEmpty(result.ResultOutput)) _results = $"Output: \n {result.ResultOutput}";
            if (!string.IsNullOrEmpty(result.ResultErrors)) _results += $"🚩Errors: \n {result.ResultErrors}";
            Logger.Log(LogLevel.Information, $"[{_solutionId}] Results received: {result.ResultOutput} with errors {result.ResultErrors}");
        }*/
    }


    private async void Compile()
    {
        if (_isLoading) return;
        Console.WriteLine(_code);
        Logger.Log(LogLevel.Information, $"[{_solutionId}] Compiler clicked, sending code: '{_code}'");
        _isLoading = true;
        //ServiceOnCompileResultReceived(await _service.SendSourceCode(_solutionId, _code));
        _isLoading = false;
        StateHasChanged();
    }

}